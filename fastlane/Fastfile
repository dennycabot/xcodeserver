#Updating to Latest Fastlane Version
update_fastlane
fastlane_version "2.66.2"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods
    # carthage
  end

  # VARIABLES
  plistFile = 'XcodeServer/Info.plist'
  target = 'XcodeServer'
  itunes_username = "cto@cabotsolutions.com"
  export_plist = "./ExportOptions.plist"

  # Auxiliary Options
  ipa_folder = ""
  ipa_path = ""
  build_number = ""
  version_number = ""

  #Auxiliary Lanes
  before_all do
    version_number = get_info_plist_value(
      path: plistFile,
      key: 'CFBundleShortVersionString',
    )
  end

  lane :exportIpa do
    build_number = get_info_plist_value(
      path: plistFile,
      key: 'CFBundleVersion',
    )

    ipa_folder = "#{ENV['XCS_DERIVED_DATA_DIR']}/deploy/#{version_number}.#{build_number}/"
    ipa_path = "#{ipa_folder}#{target}.ipa"
    sh "mkdir -p #{ipa_folder}"

    # Export the IPA from the archive file created by the bot
    sh "xcrun xcodebuild -exportArchive -archivePath \"#{ENV['XCS_ARCHIVE']}\" -exportPath \"#{ipa_folder}\" -IDEPostProgressNotifications=YES -DVTAllowServerCertificates=YES -DVTSigningCertificateSourceLogLevel=3 -DVTSigningCertificateManagerLogLevel=3 -DTDKProvisioningProfileExtraSearchPaths=/Library/Developer/XcodeServer/ProvisioningProfiles -exportOptionsPlist '#{export_plist}'"
  end

  # End Others #

  # Before #
  lane :ensure_clean do
    begin
      ensure_git_status_clean
    rescue Exception
      reset_git_repo(force: true)
    end
  end
lane :before_integration_sandbox do |options|
    ensure_clean
    cocoapods
    build_number = "#{number_of_commits}"
    set_info_plist_value(
      path: plistFile,
      key: 'CFBundleVersion',
      value: "#{build_number}",
    )
    if options[:version]
      version_number = options[:version]
      set_info_plist_value(
        path: plistFile,
        key: 'CFBundleShortVersionString',
        value: "#{version_number}"
      )
    end
    begin
      cert(development: true)
      sigh(output_path: '/Library/Developer/XcodeServer/ProvisioningProfiles', skip_install: true, development: true)
    rescue Exception
    end
  end
lane :before_integration_testflight do |options|
    ensure_clean
    cocoapods
    if options[:version]
      version_number = options[:version]
      set_info_plist_value(
        path: plistFile,
        key: 'CFBundleShortVersionString',
        value: "#{version_number}"
      )
    end
    build_number = "#{number_of_commits}"
    lv = latest_testflight_build_number(version: version_number)
    latest = "#{lv}"
    if build_number.to_i <= latest.to_i
      newbn = latest.to_i + 1
      build_number = "#{newbn}"
    end
    set_info_plist_value(
      path: plistFile,
      key: 'CFBundleVersion',
      value: "#{build_number}"
    )
    cert
    sigh(output_path: '/Library/Developer/XcodeServer/ProvisioningProfiles', skip_install: true)
  end
# End Before #


  # After #

  lane :after_integration_sandbox do

    crashlytics(
      crashlytics_path: "./Pods/Crashlytics/",
      api_token: crashlytics_api_token,
      build_secret: crashlytics_build_secret,
      ipa_path: ENV["XCS_PRODUCT"],
      notes_path: ENV["XCS_PRIMARY_REPO_DIR"] + "/ReleaseNotes.txt",
      notifications: true,
      groups: "homolog,dev-ios"
    )

    build_number = get_info_plist_value(
      path: plistFile,
      key: 'CFBundleVersion',
    )
    begin
      vtag = "sandbox.v#{version_number}.#{build_number}"
      add_git_tag(
        tag: vtag
      )
      push_git_tags
    rescue Exception
    end
  end
lane :afterIntegrationTestFlight do
    exportIpa
    testflight(
      username: itunes_username,
      ipa: ipa_path,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
    begin
      crashlytics(
        crashlytics_path: "./Pods/Crashlytics/",
        api_token: crashlytics_api_token,
        build_secret: crashlytics_build_secret,
        ipa_path: ENV["XCS_PRODUCT"],
        notes_path: ENV["XCS_PRIMARY_REPO_DIR"] + "/ReleaseNotes.txt",
        notifications: false,
        groups: "homolog,dev-ios"
      )
    rescue Exception
    end
    build_number = get_info_plist_value(
      path: plistFile,
      key: 'CFBundleVersion',
    )
    begin
      vtag = "store.v#{version_number}.#{build_number}"
      add_git_tag(
        tag: vtag
      )
      push_git_tags
    rescue Exception
    end

  end
# End After #
end
